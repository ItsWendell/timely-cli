{"version":3,"sources":["../../src/commands/entries.js"],"names":["app","command","action","args","callback","TimelyAPI","getProjects","then","result","projects","Object","values","map","project","name","value","id","prompt","type","message","source","answers","input","search","Promise","resolve","results","fuzzy","filter","extract","string","score","ui","redraw","console","log","catch","test","date","Date","chrono","parseDate","getEntries","entries","length","format","moment","HTML5_FMT","DATE","table","CLITable","head","forEach","entry","push","note","duration","formatted","toString"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,cACEC,OADF,CACU,yCADV,EACqD,uBADrD,EAEEC,MAFF,CAES,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AAAA;;AACjCC,kBAAUC,WAAV,GAAwBC,IAAxB,CAA6B,UAACC,MAAD,EAAY;AACxC,MAAMC,WAAWC,OAAOC,MAAP,CAAcH,MAAd,EAAsBI,GAAtB,CAA0B,UAACC,OAAD;AAAA,UAAc;AACxDC,UAAMD,QAAQC,IAD0C;AAExDC,WAAOF,QAAQG;AAFyC,IAAd;AAAA,GAA1B,CAAjB;AAIA,QAAKC,MAAL,CAAY,CAAC;AACZC,SAAM,cADM;AAEZJ,SAAM,WAFM;AAGZK,YAAS,yBAHG;AAIZC,WAAQ,gBAAUC,OAAV,EAAmBC,KAAnB,EAA0B;AACjC,QAAMC,SAASD,SAAS,EAAxB;AACA,WAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC/B,SAAMC,UAAUC,gBAAMC,MAAN,CAAaL,MAAb,EAAqBd,QAArB,EAA+B;AAC9CoB,eAAS,iBAAUhB,OAAV,EAAmB;AAC3B,cAAOA,QAAQC,IAAf;AACA;AAH6C,MAA/B,CAAhB;AAKA,YAAOW,QAAQC,QAAQd,GAAR,CAAY;AAAA,aAAUJ,OAAOsB,MAAP,GAAgB,IAAhB,GAAuBtB,OAAOuB,KAAxC;AAAA,MAAZ,CAAR,CAAP;AACA,KAPM,CAAP;AAQA;AAdW,GAAD,CAAZ,EAeIxB,IAfJ,CAeS,UAACmB,OAAD,EAAa;AACrB1B,iBAAIgC,EAAJ,CAAOC,MAAP;AACAC,WAAQC,GAAR,CAAY,SAAZ,EAAuBT,OAAvB;AACAtB,YAASsB,OAAT;AACA,GAnBD,EAmBGU,KAnBH,CAmBS,UAACC,IAAD;AAAA,UAAUH,QAAQC,GAAR,CAAY,OAAZ,CAAV;AAAA,GAnBT;AAoBAD,UAAQC,GAAR,CAAY,gBAAZ;AACA/B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,EA3DD;AA4DA,CA/DF;;AAiEAJ,cACEC,OADF,CACU,+BADV,EAC2C,8DAD3C,EAEEC,MAFF,CAES,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACjC,KAAIkC,OAAO,IAAIC,IAAJ,EAAX;AACA,KAAIpC,KAAKmC,IAAT,EAAe;AACdA,SAAOE,qBAAOC,SAAP,CAAiBtC,KAAKmC,IAAtB,CAAP;AACA;;AAED,KAAI,CAACA,IAAL,EAAW;AACVJ,UAAQC,GAAR,wBAAiChC,KAAKmC,IAAtC;AACA,SAAOlC,UAAP;AACA;AACDC,kBAAUqC,UAAV,CAAqBJ,IAArB,EAA2B/B,IAA3B,CAAgC,UAACoC,OAAD,EAAa;AAC5C,MAAI,CAACA,QAAQC,MAAb,EAAqB;AACpBV,WAAQC,GAAR,CAAY,0BAAZ,EAAwC,sBAAOG,IAAP,EAAaO,MAAb,CAAoBC,iBAAOC,SAAP,CAAiBC,IAArC,CAAxC;AACA,UAAO5C,UAAP;AACA;AACD,MAAI6C,QAAQ,IAAIC,kBAAJ,CAAa;AACxBC,SAAM,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB;AADkB,GAAb,CAAZ;;AAIAzC,SAAOC,MAAP,CAAcgC,OAAd,EAAuBS,OAAvB,CAA+B,UAACC,KAAD,EAAW;AACzCJ,SAAMK,IAAN,CAAW,CACVD,MAAME,IADI,EAEVF,MAAMG,QAAN,CAAeC,SAFL,EAGVJ,MAAMxC,OAAN,CAAcC,IAHJ,CAAX;AAKA,GAND;;AAQAoB,UAAQC,GAAR,CAAYc,MAAMS,QAAN,EAAZ;AACAtD;AACA,EAnBD;AAoBA,CAhCF","file":"entries.js","sourcesContent":["import TimelyAPI from '../timely';\nimport moment from 'moment';\nimport chrono from 'chrono-node';\nimport CLITable from 'cli-table';\nimport fuzzy from 'fuzzy';\nimport app from '../app';\n\napp\n\t.command('entries create [note] [duration] [date]', 'Create a timely entry')\n\t.action(function (args, callback) {\n\t\tTimelyAPI.getProjects().then((result) => {\n\t\t\tconst projects = Object.values(result).map((project) => ({\n\t\t\t\tname: project.name,\n\t\t\t\tvalue: project.id,\n\t\t\t}));\n\t\t\tthis.prompt([{\n\t\t\t\ttype: 'autocomplete',\n\t\t\t\tname: 'projectId',\n\t\t\t\tmessage: 'Select a project to use',\n\t\t\t\tsource: function (answers, input) {\n\t\t\t\t\tconst search = input || '';\n\t\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\t\tconst results = fuzzy.filter(search, projects, {\n\t\t\t\t\t\t\textract: function (project) {\n\t\t\t\t\t\t\t\treturn project.name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn resolve(results.map(result => result.string + ' -' + result.score));\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t}]).then((results) => {\n\t\t\t\tapp.ui.redraw();\n\t\t\t\tconsole.log('results', results);\n\t\t\t\tcallback(results);\n\t\t\t}).catch((test) => console.log('error'));\n\t\t\tconsole.log('TEST TEST TEST');\n\t\t\tcallback();\n\t\t\t/*\n\t\t\tthis.prompt([, {\n\t\t\t\ttype: 'input',\n\t\t\t\tname: 'note',\n\t\t\t\tmessage: 'Choose a note for this entry?',\n\t\t\t\twhen: !args.note,\n\t\t\t}, {\n\t\t\t\ttype: 'confirm',\n\t\t\t\tname: 'timer',\n\t\t\t\tmessage: 'Do you want to start a timer? (right now)',\n\t\t\t\tdefault: true,\n\t\t\t}, {\n\t\t\t\ttype: 'input',\n\t\t\t\tname: 'duration',\n\t\t\t\tmessage: 'Duration for this entry?',\n\t\t\t\twhen: ({ timer }) => !args.duration && !timer,\n\t\t\t}, {\n\t\t\t\ttype: 'input',\n\t\t\t\tname: 'date',\n\t\t\t\tmessage: 'Date of the entry?',\n\t\t\t\twhen: ({ timer }) => !args.date && !timer,\n\t\t\t\tdefault: moment().format(moment.HTML5_FMT.DATE),\n\t\t\t}]).then(({ note, timer, duration, date }) => {\n\t\t\t\tif (timer) {\n\t\t\t\t\tconsole.error('Timer not supported yet!');\n\t\t\t\t\treturn callback(false);\n\t\t\t\t}\n\n\t\t\t\tconsole.log('Answers...', answers);\n\t\t\t\tcallback(answers);\n\t\t\t});\n\t\t\t*/\n\t\t});\n\t});\n\napp\n\t.command('entries list [date] [enddate]', 'Show entries of a specific date or range. defaults to today.')\n\t.action(function (args, callback) {\n\t\tlet date = new Date();\n\t\tif (args.date) {\n\t\t\tdate = chrono.parseDate(args.date);\n\t\t}\n\n\t\tif (!date) {\n\t\t\tconsole.log(`We tried hard but ${args.date} is an invalid date.`);\n\t\t\treturn callback();\n\t\t}\n\t\tTimelyAPI.getEntries(date).then((entries) => {\n\t\t\tif (!entries.length) {\n\t\t\t\tconsole.log('There are no entries for', moment(date).format(moment.HTML5_FMT.DATE));\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t\tlet table = new CLITable({\n\t\t\t\thead: ['Note', 'Time', 'Project'],\n\t\t\t});\n\n\t\t\tObject.values(entries).forEach((entry) => {\n\t\t\t\ttable.push([\n\t\t\t\t\tentry.note,\n\t\t\t\t\tentry.duration.formatted,\n\t\t\t\t\tentry.project.name,\n\t\t\t\t]);\n\t\t\t});\n\n\t\t\tconsole.log(table.toString());\n\t\t\tcallback();\n\t\t});\n\t});\n"]}