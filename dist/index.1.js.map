{"version":3,"sources":["../src/index.1.js"],"names":["app","storage","init","path","accountId","projectId","TimelyAPI","authenticate","then","console","log","selectAccount","catch","command","alias","action","args","callback","authorizeURL","prompt","name","message","token","authorize","finally","registerCommands","login","find","remove","activeAccountId","self","getAccounts","accounts","choices","Object","values","map","account","value","id","type","delimiter","registerAccountCommands","getCurrentUser","user","data","email","getCurrentAccountName","getProjects","projects","project","activeProjectId","show"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,MAAM,uBAAZ;;AAEAC,sBAAQC,IAAR;;AAEA,IAAMC,OAAO;AACTC,eAAW,IADF;AAETC,eAAW;AAFF,CAAb;;AAKAC,iBAAUC,YAAV,GAAyBC,IAAzB,CAA8B,YAAM;AAChCC,YAAQC,GAAR,CAAY,iCAAZ;AACAC;AACH,CAHD,EAGGC,KAHH,CAGS,YAAM;AACXH,YAAQC,GAAR,CAAY,kCAAZ;AACAV,QACKa,OADL,CACa,OADb,EACsB,iBADtB,EAEKC,KAFL,CAEW,MAFX,EAGKC,MAHL,CAGY,UAASC,IAAT,EAAeC,QAAf,EAAyB;AAC7BR,gBAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,iBAAUY,YAAV,EAAnC;AACA,aAAKC,MAAL,CAAY,CAAC;AACTC,kBAAM,OADG;AAETC,qBAAS;AAFA,SAAD,CAAZ,EAGIb,IAHJ,CAGS,gBAAe;AAAA,gBAAZc,KAAY,QAAZA,KAAY;;AACpBhB,6BAAUiB,SAAV,CAAoBD,KAApB,EAA2BE,OAA3B,CAAmC,YAAM;AACrCC;AACAR;AACH,aAHD;AAIH,SARD;AASH,KAdL;AAeAE;AACH,CArBD;;AAuBA,IAAMR,gBAAgB,SAAhBA,aAAgB,GAAM;AACxB,QAAMe,QAAQ1B,IAAI2B,IAAJ,CAAS,OAAT,CAAd;AACA,QAAID,KAAJ,EAAWA,MAAME,MAAN;;AAEX,QAAI,CAACtB,iBAAUuB,eAAf,EAAgC;AAC5B7B,YACKa,OADL,CACa,SADb,EACwB,yBADxB,EAEKE,MAFL,CAEY,UAASC,IAAT,EAAeC,QAAf,EAAyB;AAAA;;AAC7B,gBAAMa,OAAO,IAAb;AACAxB,6BAAUyB,WAAV,GAAwBvB,IAAxB,CAA6B,UAACwB,QAAD,EAAc;AACvC,oBAAMC,UAAUC,OAAOC,MAAP,CAAcH,QAAd,EAAwBI,GAAxB,CAA4B,UAACC,OAAD;AAAA,2BAAc;AACtDjB,8BAAMiB,QAAQjB,IADwC;AAEtDkB,+BAAOD,QAAQE;AAFuC,qBAAd;AAAA,iBAA5B,CAAhB;AAIA,sBAAKpB,MAAL,CAAY;AACRqB,0BAAM,MADE;AAERpB,0BAAM,WAFE;AAGRC,6BAAS,yBAHD;AAIRY;AAJQ,iBAAZ,EAKGzB,IALH,CAKQ,iBAAmB;AAAA,wBAAhBJ,SAAgB,SAAhBA,SAAgB;;AACvBE,qCAAUuB,eAAV,GAA4BzB,SAA5B;AACAJ,wBAAIyC,SAAJ,eAA0BnC,iBAAU0B,QAAV,CAAmB5B,SAAnB,EAA8BgB,IAAxD;AACAsB;AACAzB;AACH,iBAVD;AAWH,aAhBD;AAiBH,SArBL;AAsBAE;AACH;AACJ,CA7BD;;AA+BA,SAASuB,uBAAT,GAAmC;AAC/B1C,QACKa,OADL,CACa,IADb,EACmB,sBADnB,EAEKE,MAFL,CAEY,UAASC,IAAT,EAAeC,QAAf,EAAyB;AAC7BX,yBAAUqC,cAAV,GAA2BnC,IAA3B,CAAgC,iBAAoB;AAAA,gBAAXoC,IAAW,SAAjBC,IAAiB;;AAChDpC,oBAAQC,GAAR,cAAsBkC,KAAKxB,IAA3B,UAAoCwB,KAAKE,KAAzC,aAAsDxC,iBAAUyC,qBAAV,EAAtD;AACA9B;AACH,SAHD;AAIH,KAPL;;AASAjB,QACKa,OADL,CACa,UADb,EACyB,uBADzB,EAEKE,MAFL,CAEY,UAASC,IAAT,EAAeC,QAAf,EAAyB;AAAA;;AAC7BX,yBAAU0C,WAAV,GAAwBxC,IAAxB,CAA6B,UAACyC,QAAD,EAAc;AACvC,gBAAMhB,UAAUC,OAAOC,MAAP,CAAcc,QAAd,EAAwBb,GAAxB,CAA4B,UAACc,OAAD;AAAA,uBAAc;AACtD9B,0BAAM8B,QAAQ9B,IADwC;AAEtDkB,2BAAOY,QAAQX;AAFuC,iBAAd;AAAA,aAA5B,CAAhB;AAIA,mBAAKpB,MAAL,CAAY;AACRqB,sBAAM,MADE;AAERpB,sBAAM,WAFE;AAGRC,yBAAS,yBAHD;AAIRY;AAJQ,aAAZ,EAKGzB,IALH,CAKQ,iBAAmB;AAAA,oBAAhBH,SAAgB,SAAhBA,SAAgB;;AACvBC,iCAAU6C,eAAV,GAA4B9C,SAA5B;AACAL,oBAAIyC,SAAJ,eAA0BnC,iBAAU+B,OAAV,CAAkBjB,IAA5C,SAAoDd,iBAAU4C,OAAV,CAAkB9B,IAAtE;AACAH;AACH,aATD;AAUH,SAfD;AAgBH,KAnBL;AAoBH;;AAEDjB,IACKa,OADL,CACa,SADb,EACwB,2BADxB,EAEKE,MAFL;AAAA,wEAEY,iBAAeC,IAAf,EAAqBC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA,sCACJR,OADI;AAAA;AAAA,+BACcR,sBAAQkC,MAAR,EADd;;AAAA;AAAA;;AAAA,oCACIzB,GADJ;;AAEJO;;AAFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFZ;;AAAA;AAAA;AAAA;AAAA;;AAOA,IAAME,SAAS,SAATA,MAAS,GAAM;AACjBnB,QACKyC,SADL,CACe,WADf,EAEKW,IAFL;AAGH,CAJD","file":"index.1.js","sourcesContent":["import 'dotenv/config';\nimport storage from 'node-persist';\nimport vorpal from 'vorpal';\nimport TimelyAPI from './timely';\n\nconst app = vorpal();\n\nstorage.init();\n\nconst path = {\n    accountId: null,\n    projectId: null,\n}\n\nTimelyAPI.authenticate().then(() => {\n    console.log('Welcome back to the Timely CLI!');\n    selectAccount();\n}).catch(() => {\n    console.log(\"You're not logged in Timely yet!\");\n    app\n        .command('login', 'Log into Timely')\n        .alias('auth')\n        .action(function(args, callback) {\n            console.log('Login with Timely: ', TimelyAPI.authorizeURL());\n            this.prompt([{\n                name: 'token',\n                message: 'Authorization code: '\n            }]).then(({ token }) => {\n                TimelyAPI.authorize(token).finally(() => {\n                    registerCommands();\n                    callback();\n                });\n            });\n        });\n    prompt();\n})\n\nconst selectAccount = () => {\n    const login = app.find('login');\n    if (login) login.remove();\n\n    if (!TimelyAPI.activeAccountId) {\n        app\n            .command('account', 'Select a timely account')\n            .action(function(args, callback) {\n                const self = this;\n                TimelyAPI.getAccounts().then((accounts) => {\n                    const choices = Object.values(accounts).map((account) => ({\n                        name: account.name,\n                        value: account.id,\n                    }));\n                    this.prompt({\n                        type: 'list',\n                        name: 'accountId',\n                        message: 'Select a account to use',\n                        choices,\n                    }).then(({ accountId }) => {\n                        TimelyAPI.activeAccountId = accountId;\n                        app.delimiter(`~ Timely/${TimelyAPI.accounts[accountId].name} >`);\n                        registerAccountCommands();\n                        callback();\n                    });\n                });\n            });\n        prompt();\n    }\n}\n\nfunction registerAccountCommands() {\n    app\n        .command('me', 'Your account details')\n        .action(function(args, callback) {\n            TimelyAPI.getCurrentUser().then(({ data: user }) => {\n                console.log(`You're ${user.name} (${user.email}) at ${TimelyAPI.getCurrentAccountName()}`);\n                callback();\n            });\n        });\n\n    app\n        .command('projects', 'The accounts projects')\n        .action(function(args, callback) {\n            TimelyAPI.getProjects().then((projects) => {\n                const choices = Object.values(projects).map((project) => ({\n                    name: project.name,\n                    value: project.id,\n                }));\n                this.prompt({\n                    type: 'list',\n                    name: 'projectId',\n                    message: 'Select a project to use',\n                    choices,\n                }).then(({ projectId }) => {\n                    TimelyAPI.activeProjectId = projectId;\n                    app.delimiter(`~ Timely/${TimelyAPI.account.name}/${TimelyAPI.project.name}>`);\n                    callback();\n                });\n            });\n        });\n}\n\napp\n    .command('storage', 'List your timely accounts')\n    .action(async function(args, callback) {\n        console.log(await storage.values());\n        callback();\n    });\n\nconst prompt = () => {\n    app\n        .delimiter('~Timely >')\n        .show();\n}\n"]}